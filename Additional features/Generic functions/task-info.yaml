type: edu
custom_name: Generic functions
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 169
    length: 160
    placeholder_text: |-
      TODO("Add a loop that adds an element to first if 'predicate'
                  evaluates to true, and to second if not")
    initial_state:
      length: 115
      offset: 169
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: |2
          for (element in source) {
              if (predicate(element)) {
                  first.add(element)
              } else {
                  second.add(element)
              }
          }
  text: |
    import java.util.*

    fun <T, C : MutableCollection<T>> partitionTo(
        source: Collection<T>,
        first: C,
        second: C,
        predicate: (T) -> Boolean
    ): Pair<C, C> {
    TODO("Add a loop that adds an element to first if 'predicate'
                evaluates to true, and to second if not")    return Pair(first, second)
    }

    fun partitionWordsAndLines() {
        val (words, lines) = partitionTo(listOf("a", "a b", "c", "d e"), ArrayList(), ArrayList()) { s -> !s.contains(" ") }
        check(words == listOf("a", "c"))
        check(lines == listOf("a b", "d e"))
    }

    fun partitionLettersAndOtherSymbols() {
        val (letters, other) = partitionTo(
            setOf('a', '%', 'r', '}'),
            HashSet(),
            HashSet()
        ) { c -> c in 'a'..'z' || c in 'A'..'Z' }
        check(letters == setOf('a', 'r'))
        check(other == setOf('%', '}'))
    }
  learner_created: false
- name: test/tests.kt
  visible: false
  text: |-
    import koans.util.errorMessage
    import org.junit.Assert
    import org.junit.Test
    import java.util.*

    class TestGenericFunctions {
        @Test(timeout = 1000)
        fun testPartitionWordsAndLines() {
            partitionWordsAndLines()

            val (words, lines) = partitionTo(
                listOf("a", "a b", "c", "d e"),
                ArrayList(),
                ArrayList()
            ) { s -> !s.contains(" ") }
            Assert.assertEquals(errorMessage("partitionTo"), listOf("a", "c"), words)
            Assert.assertEquals(errorMessage("partitionTo"), listOf("a b", "d e"), lines)
        }

        @Test(timeout = 1000)
        fun testPartitionLettersAndOtherSymbols() {
            partitionLettersAndOtherSymbols()

            val (letters, other) = partitionTo(
                setOf('a', '%', 'r', '}'),
                HashSet(),
                HashSet()
            ) { c -> c in 'a'..'z' || c in 'A'..'Z' }
            Assert.assertEquals(errorMessage("partitionTo"), setOf('a', 'r'), letters)
            Assert.assertEquals(errorMessage("partitionTo"), setOf('%', '}'), other)
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 05 Mar 2023 15:04:22 UTC"
record: -1
